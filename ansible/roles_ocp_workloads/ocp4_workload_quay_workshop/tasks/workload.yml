---
# - name: create random dir
#   shell: mktemp -d
#   register: tmp_dir

# - name: clone down homeroom deploy script
#   git: 
#     repo: https://github.com/afouladi7/quay-workshop.git
#     dest: "{{ tmp_dir.stdout }}"

# - name: deploy homeroom
#   shell: "/usr/bin/sh {{ tmp_dir.stdout }}/.workshop/workshop-scripts/deploy-spawner.sh"
#   ignore_errors: true

- name: Get router sub domain
  shell: oc get route -n openshift-console --output=json | grep -m 1 routerCanonicalHostname | awk '{ print $2 }' | sed -r 's/[\",]//g'
  register: CLUSTER_SUBDOMAIN_RETURN

- name: Store the subdomain
  set_fact:
    CLUSTER_SUBDOMAIN: "{{ CLUSTER_SUBDOMAIN_RETURN.stdout }}"

- name: Create the homeroom project
  shell: oc new-project homeroom
  ignore_errors: true

- name: Deploy the homeroom spawner
  shell: |
    oc process -f \
    https://raw.githubusercontent.com/afouladi7/quay-workshop/master/templates/hosted-workshop-production.json \
    -p SPAWNER_NAMESPACE=homeroom \
    -p CLUSTER_SUBDOMAIN="{{ CLUSTER_SUBDOMAIN }}" \
    -p WORKSHOP_NAME=service-mesh-workshop \
    -p CONSOLE_IMAGE=quay.io/openshift/origin-console:4.7 \
    -p WORKSHOP_IMAGE=quay.io/redhatgov/service-mesh-workshop-dashboard:latest \
    -p CUSTOM_TAB_1=Quay=https://quay.{{ CLUSTER_SUBDOMAIN }} | oc apply -n homeroom -f -

###TODOs
# Login as user1
# deploy the quay operator
# Configure CUSTOM_TAB_1 to have the quay route
# create quay project and make user1 project admin
# change WORKSHOP_IMAGE to quay workshop image

## End Homeroom


# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool